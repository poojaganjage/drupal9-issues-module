diff --git a/core/modules/node/tests/src/Functional/NodeFieldMultilingualTest.php b/core/modules/node/tests/src/Functional/NodeFieldMultilingualTest.php
index 1bd314b..ba2eb22 100644
--- a/core/modules/node/tests/src/Functional/NodeFieldMultilingualTest.php
+++ b/core/modules/node/tests/src/Functional/NodeFieldMultilingualTest.php
@@ -7,6 +7,8 @@
 use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Tests\BrowserTestBase;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 /**
  * Tests multilingual support for fields.
@@ -46,16 +48,16 @@ protected function setUp(): void {
     // Add a new language.
     ConfigurableLanguage::createFromLangcode('it')->save();
 
-    // Enable URL language detection and selection.
-    $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $config = $this->config('language.negotiation');
+    $config->set('url.prefixes', [
+      'en' => 'en',
+      'de' => 'de',
+    ])->save();
 
-    // Set "Basic page" content type to use multilingual support.
-    $edit = [
-      'language_configuration[language_alterable]' => TRUE,
-    ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
-    $this->assertRaw(t('The content type %type has been updated.', ['%type' => 'Basic page']), 'Basic page content type has been updated.');
+    $this->container->get('entity_type.manager')->getStorage('language_content_settings')->create([
+      'target_entity_type_id' => $entity_type,
+      'target_bundle' => $bundle,
+    ])->save();
 
     // Make node body translatable.
     $field_storage = FieldStorageConfig::loadByName('node', 'body');
