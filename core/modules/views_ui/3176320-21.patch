diff --git a/core/modules/views_ui/tests/src/Functional/DisplayTest.php b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
index 85d2efd9..6936485d 100644
--- a/core/modules/views_ui/tests/src/Functional/DisplayTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
@@ -21,7 +21,7 @@ class DisplayTest extends UITestBase {
   public static $testViews = ['test_display'];
 
   /**
-   * Modules to enable
+   * Modules to enable.
    *
    * @var array
    */
@@ -36,11 +36,11 @@ class DisplayTest extends UITestBase {
    * Tests adding a display.
    */
   public function testAddDisplay() {
-    $view = $this->randomView();
+    $this->randomView();
     $this->assertNoText('Block');
     $this->assertNoText('Block 2');
 
-    $this->drupalPostForm(NULL, [], t('Add @display', ['@display' => 'Block']));
+    $this->drupalPostForm(NULL, [], 'Add Block');
     $this->assertText('Block');
     $this->assertNoText('Block 2');
   }
@@ -54,7 +54,7 @@ public function testReorderDisplay() {
     ];
     $view = $this->randomView($view);
 
-    $this->clickLink(t('Reorder displays'));
+    $this->clickLink('Reorder displays');
     $this->assertNotEmpty($this->xpath('//tr[@id="display-row-default"]'), 'Make sure the default display appears on the reorder listing');
     $this->assertNotEmpty($this->xpath('//tr[@id="display-row-page_1"]'), 'Make sure the page display appears on the reorder listing');
     $this->assertNotEmpty($this->xpath('//tr[@id="display-row-block_1"]'), 'Make sure the block display appears on the reorder listing');
@@ -67,8 +67,8 @@ public function testReorderDisplay() {
       'displays[page_1][weight]' => 2,
       'displays[block_1][weight]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Apply'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->drupalPostForm(NULL, [], 'Save');
 
     $view = Views::getView($view['id']);
     $displays = $view->storage->get('display');
@@ -153,32 +153,37 @@ public function testLinkDisplay() {
     $path = 'admin/structure/views/view/test_display/edit/block_1';
     $link_display_path = 'admin/structure/views/nojs/display/test_display/block_1/link_display';
 
-    // Test the link text displays 'None' and not 'Block 1'
+    // Test the link text displays 'None' and not 'Block 1'.
     $this->drupalGet($path);
     $result = $this->xpath("//a[contains(@href, :path)]", [':path' => $link_display_path]);
-    $this->assertEqual($result[0]->getHtml(), t('None'), 'Make sure that the link option summary shows "None" by default.');
+    $this->assertEqual($result[0]->getHtml(), 'None', 'Make sure that the link option summary shows "None" by default.');
 
     $this->drupalGet($link_display_path);
     $this->assertFieldChecked('edit-link-display-0');
 
     // Test the default radio option on the link display form.
-    $this->drupalPostForm($link_display_path, ['link_display' => 'page_1'], t('Apply'));
+    $this->drupalPostForm($link_display_path, ['link_display' => 'page_1'], 'Apply');
     // The form redirects to the master display.
     $this->drupalGet($path);
 
-    $result = $this->xpath("//a[contains(@href, :path)]", [':path' => $link_display_path]);
+    $result = $this->xpath("//a[contains(@href, :path)]", [
+      ':path' => $link_display_path,
+    ]);
     $this->assertEqual($result[0]->getHtml(), 'Page', 'Make sure that the link option summary shows the right linked display.');
 
-    $this->drupalPostForm($link_display_path, ['link_display' => 'custom_url', 'link_url' => 'a-custom-url'], t('Apply'));
+    $this->drupalPostForm($link_display_path, [
+      'link_display' => 'custom_url',
+      'link_url' => 'a-custom-url',
+    ], 'Apply');
     // The form redirects to the master display.
     $this->drupalGet($path);
 
-    $this->assertSession()->linkExists(t('Custom URL'), 0, 'The link option has custom URL as summary.');
+    $this->assertSession()->linkExists('Custom URL', 0, 'The link option has custom URL as summary.');
 
-    // Test the default link_url value for new display
-    $this->drupalPostForm(NULL, [], t('Add Block'));
+    // Test the default link_url value for new display.
+    $this->drupalPostForm(NULL, [], 'Add Block');
     $this->assertUrl('admin/structure/views/view/test_display/edit/block_2');
-    $this->clickLink(t('Custom URL'));
+    $this->clickLink('Custom URL');
     $this->assertFieldByName('link_url', 'a-custom-url');
   }
 
@@ -191,14 +196,20 @@ public function testViewStatus() {
 
     // The view should initially have the enabled class on its form wrapper.
     $this->drupalGet('admin/structure/views/view/' . $id);
-    $elements = $this->xpath('//div[contains(@class, :edit) and contains(@class, :status)]', [':edit' => 'views-edit-view', ':status' => 'enabled']);
+    $elements = $this->xpath('//div[contains(@class, :edit) and contains(@class, :status)]', [
+      ':edit' => 'views-edit-view',
+      ':status' => 'enabled',
+    ]);
     $this->assertNotEmpty($elements, 'The enabled class was found on the form wrapper');
 
     $view = Views::getView($id);
     $view->storage->disable()->save();
 
     $this->drupalGet('admin/structure/views/view/' . $id);
-    $elements = $this->xpath('//div[contains(@class, :edit) and contains(@class, :status)]', [':edit' => 'views-edit-view', ':status' => 'disabled']);
+    $elements = $this->xpath('//div[contains(@class, :edit) and contains(@class, :status)]', [
+      ':edit' => 'views-edit-view',
+      ':status' => 'disabled',
+    ]);
     $this->assertNotEmpty($elements, 'The disabled class was found on the form wrapper.');
   }
 
@@ -240,7 +251,7 @@ public function testActionLinks() {
     $display_title = "'<test>'";
     $this->drupalGet('admin/structure/views/view/test_display');
     $display_title_path = 'admin/structure/views/nojs/display/test_display/block_1/display_title';
-    $this->drupalPostForm($display_title_path, ['display_title' => $display_title], t('Apply'));
+    $this->drupalPostForm($display_title_path, ['display_title' => $display_title], 'Apply');
 
     // Ensure that the title is escaped as expected.
     $this->assertEscaped($display_title);
@@ -271,8 +282,8 @@ public function testHideDisplayOverride() {
     $this->assertText('All displays');
 
     // Remove a display and test if the override option is hidden.
-    $this->drupalPostForm('admin/structure/views/view/test_display/edit/block_1', [], t('Delete @display', ['@display' => 'Block']));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->drupalPostForm('admin/structure/views/view/test_display/edit/block_1', [], 'Delete Block');
+    $this->drupalPostForm(NULL, [], 'Save');
 
     $this->drupalGet('admin/structure/views/nojs/handler/test_display/page_1/field/title');
     $this->assertNoText('All displays');
@@ -284,7 +295,7 @@ public function testHideDisplayOverride() {
 
     // Test that the override option is shown if the current display is
     // overridden so that the option to revert is available.
-    $this->drupalPostForm(NULL, ['override[dropdown]' => 'page_1'], t('Apply'));
+    $this->drupalPostForm(NULL, ['override[dropdown]' => 'page_1'], 'Apply');
     \Drupal::configFactory()->getEditable('views.settings')->set('ui.show.master_display', FALSE)->save();
     $this->drupalGet('admin/structure/views/nojs/handler/test_display/page_1/field/title');
     $this->assertText('Revert to default');
